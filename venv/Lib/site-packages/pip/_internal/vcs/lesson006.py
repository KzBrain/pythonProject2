#Task 1
# 1. Создать класс TrafficLight (светофор).
# определить у него один атрибут color (цвет) и метод running (запуск);
# атрибут реализовать как приватный;
# в рамках метода реализовать переключение светофора в режимы: красный, жёлтый, зелёный;
# продолжительность первого состояния (красный) составляет 7 секунд, второго (жёлтый) — 2 секунды, третьего (зелёный) — на ваше усмотрение;
# переключение между режимами должно осуществляться только в указанном порядке (красный, жёлтый, зелёный);
# проверить работу примера, создав экземпляр и вызвав описанный метод.
# Задачу можно усложнить, реализовав проверку порядка режимов. При его нарушении выводить соответствующее сообщение и завершать скрипт.
import time


class Trafficlight:
    __color = ['red','yellow','green']
    def running(self):
        color = ['red', 'yellow', 'green']
        time.sleep(7)
        print(color[0])
        time.sleep(3)
        print(color[1])
        time.sleep(8)
        print(color[2])
traff = Trafficlight()
traff.running()
#Task 2
#Реализовать класс Road (дорога).
#определить атрибуты: length (длина), width (ширина);
#значения атрибутов должны передаваться при создании экземпляра класса;
#атрибуты сделать защищёнными;
#определить метод расчёта массы асфальта, необходимого для покрытия всей дороги;
#использовать формулу: длина*ширина*масса асфальта для покрытия одного кв. метра дороги асфальтом, толщиной в 1 см*число см толщины полотна;
#проверить работу метода.
#Например: 20 м*5000 м*25 кг*5 см = 12500 т.
class Road:
    def __init__(self,_length,_width):
        self._l = _length
        self._w = _width
    def mass(self):
        return self._l * self._w



class Findmass(Road):
    def __init__(self,_length,_width,_height):
        self._h = _height
        super().__init__(_length,_width)



r = Findmass(4500,20,125)
print(r.mass())
# Task 3
#Реализовать базовый класс Worker (работник).
#определить атрибуты: name, surname, position (должность), income (доход);
#последний атрибут должен быть защищённым и ссылаться на словарь, содержащий элементы: оклад и премия, например, {"wage": wage, "bonus": bonus};
#создать класс Position (должность) на базе класса Worker;
#проверить работу примера на реальных данных: создать экземпляры класса Position, передать данные, проверить значения атрибутов, вызвать методы экземпляров.
class Worker:

    def __init__(self,name,surname,position,_income,wage,bonus):
        self.n = str(name)
        self.s = surname
        self.p = position

        self._income = {'wage':wage,'bonus':bonus}



class Position(Worker):
    def __init__(self,name,surname,position,wage,bonus):
        super().__init__(self,name,surname,position,wage,bonus)
    def  get_full_name(self):

        return self.n  + '' + self.s

    def get_total_income(self):
        return self._income.get('wage') + self._income.get('bonus')

p = Position('Alex','Jonny','Capitan',20000,3000)
print(Position)
print(p.get_full_name())

print(p.get_total_income())

# Task 4
#Реализуйте базовый класс Car.
#у класса должны быть следующие атрибуты: speed, color, name, is_police (булево). А также методы: go, stop, turn(direction), которые должны сообщать, что машина поехала, остановилась, повернула (куда);
#опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar;
#добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля;
#для классов TownCar и WorkCar переопределите метод show_speed. При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.
class Car:
    def __init__(self,speed,color,name,is_police):
        self.s = speed
        self.c = color
        self.n = name
        self.i = is_police
    def go(self):
        print('Straight direction')
    def stop(self):
        print('Retard now')
    def turn(self,direction):
        return 'Turned to' + direction
    def show_speed(self):
        return f'Current speed {self.n} is {self.s}'



class TownСar(Car) :
    def __init__(self, speed, color, name, is_police):
        super().__init__( speed, color, name, is_police)

    def show_speed(self):
        print(f'Current speed of town car {self.n} is {self.s}')

        if self.s > 60:
            return f'Speed of {self.n} is higher than allow for town car'
        else:
            return f'Speed of {self.n} is normal for town car'


class SportCar(Car) :
    def __init__(self, speed, color, name, is_police):
        super().__init__( speed, color, name, is_police)
class WorkCar(Car) :
    def __init__(self, speed, color, name, is_police):
        super().__init__( speed, color, name, is_police)

    def show_speed(self):
            print(f'Current speed of town car {self.n} is {self.s}')

            if self.s > 40:
                return f'Speed of {self.n} is higher than allow for town car'
            else:
                return f'Speed of {self.n} is normal for town car'



class PoliceCar(Car) :
    def __init__(self, speed, color, name, is_police):
        super().__init__( speed, color, name, is_police)

audi = TownСar(70,'red','audi','false')
print(audi.go())
print(audi.show_speed())

# Task 5
#5. Реализовать класс Stationery (канцелярская принадлежность).
#определить в нём атрибут title (название) и метод draw (отрисовка). Метод выводит сообщение «Запуск отрисовки»;
#создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер);
#в каждом классе реализовать переопределение метода draw. Для каждого класса метод должен выводить уникальное сообщение;
#создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.
class Stationery:
    def __init__(self,title):
        self.title = title
    def draw(self):
        return f'Equanity'
class Pen(Stationery) :
    def draw(self):
        return f'Pens draw'
class Pencil(Stationery) :
    def draw(self):
        return f'Pencils draw'
class Handle(Stationery) :
    def draw(self):
        return f'Hadles deal'
p = Pen('Red')
print(p.draw())
